/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.ayckermann.discordbot;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.time.ZoneId;
import java.util.Date;
import javax.swing.table.DefaultTableModel;
import net.dv8tion.jda.api.entities.Guild;

/**
 *
 * @author ASUS VIVOBOOK
 */
public class BroadcastForm extends javax.swing.JFrame {

    /**
     * Creates new form BroadcastForm
     */
    Database db = new Database();
    Broadcast jda = new Broadcast();
    public BroadcastForm() throws SQLException {
        initComponents();
        tblBroadcast.getColumnModel().getColumn(0).setMinWidth(2);
        tblBroadcast.getColumnModel().getColumn(1).setMinWidth(200);
        tblBroadcast.getColumnModel().getColumn(2).setMinWidth(100);
        loadGuild();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spBroadcast = new javax.swing.JScrollPane();
        tblBroadcast = new javax.swing.JTable();
        labelMsgBroadcast = new javax.swing.JLabel();
        spBrodcast1 = new javax.swing.JScrollPane();
        txtBroadcast = new javax.swing.JTextArea();
        ddGuild = new javax.swing.JComboBox<>();
        ddBroadType = new javax.swing.JComboBox<>();
        btnBroadcast = new javax.swing.JButton();
        btnSchedule = new javax.swing.JButton();
        inputDate = new com.toedter.calendar.JDateChooser();
        inputHour = new javax.swing.JSpinner();
        inputMinute = new javax.swing.JSpinner();
        labelDate = new javax.swing.JLabel();
        labelDate1 = new javax.swing.JLabel();
        labelDate2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblBroadcast.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Message", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBroadcast.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBroadcastMouseClicked(evt);
            }
        });
        spBroadcast.setViewportView(tblBroadcast);

        labelMsgBroadcast.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelMsgBroadcast.setText("Message");

        txtBroadcast.setColumns(20);
        txtBroadcast.setRows(5);
        spBrodcast1.setViewportView(txtBroadcast);

        ddBroadType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TO USERS IN DATABASE", "TO GUILDS IN DATABASE", "TO SELECTED GUILD", "TO SELECTED GUILD'S MEMBER" }));

        btnBroadcast.setBackground(new java.awt.Color(0, 102, 51));
        btnBroadcast.setForeground(new java.awt.Color(255, 255, 255));
        btnBroadcast.setText("BROADCAST NOW");
        btnBroadcast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBroadcastActionPerformed(evt);
            }
        });

        btnSchedule.setBackground(new java.awt.Color(153, 153, 0));
        btnSchedule.setForeground(new java.awt.Color(255, 255, 255));
        btnSchedule.setText("SCHEDULE BROADCAST");
        btnSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScheduleActionPerformed(evt);
            }
        });

        inputDate.setDateFormatString("dd/MM/yyyy");
        inputDate.setMinSelectableDate(date());

        inputHour.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));

        inputMinute.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        labelDate.setText("Date");

        labelDate1.setText("Hour");

        labelDate2.setText("Minute");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelMsgBroadcast, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(spBrodcast1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ddGuild, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ddBroadType, 0, 345, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(btnBroadcast)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelDate, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(inputDate, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(inputHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(labelDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(labelDate2)
                                                .addComponent(inputMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(btnSchedule))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addComponent(spBroadcast, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(labelMsgBroadcast)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spBroadcast, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(spBrodcast1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(ddBroadType, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(ddGuild, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelDate1)
                            .addComponent(labelDate2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inputHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBroadcast, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    void dataBroadcast(){
     try {
            ResultSet resultSet =  db.load("SELECT * FROM broadcast", null);
            DefaultTableModel tableModel = (DefaultTableModel)tblBroadcast.getModel();
            tableModel.setRowCount(0); //reset data
            
            while (resultSet.next()) {
                int id = resultSet.getInt("idMessage");
                String message =  resultSet.getString("message");
                String respond = resultSet.getString("respond");

                Object[] rowData = {id,message,respond};
                tableModel.addRow(rowData);
            }
        } catch (SQLException ex) {
            Logger.getLogger(MessageForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    void loadGuild() throws SQLException{
        ResultSet resultSet= db.load("SELECT * FROM guild", null);
        while (resultSet.next()) {            
            String name = resultSet.getString("guildName");
            String id = resultSet.getString("guildId");
            ddGuild.addItem(name + "/" +id);
        }
    }
    
    Date date(){
        LocalDateTime localDateTime = LocalDateTime.now();

        // Convert LocalDateTime to Date
        ZoneId zoneId = ZoneId.systemDefault(); // Get the default time zone
        Date date = Date.from(localDateTime.atZone(zoneId).toInstant());
        return date;
    }
    
     void broadcastListener(String message, String schedule){
        String type = ddBroadType.getSelectedItem().toString();

        if(type.equals("TO USERS IN DATABASE")){
            try {
                jda.broadcastToUsersInDb(message,schedule);
                Object[] data ={message,type,schedule};
                db.edit("INSERT INTO broadcast (messageBroadcast, sentTo, dateSent) VALUES(?,?,?)", data);
            } catch (SQLException ex) {
                Logger.getLogger(BroadcastForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(type.equals("TO GUILDS IN DATABASE")){
            try {
                jda.broadcastToAllGuild(message,schedule);
                Object[] data ={message,type,schedule};
                db.edit("INSERT INTO broadcast (messageBroadcast, sentTo, dateSent) VALUES(?,?,?)", data);
            } catch (SQLException ex) {
                Logger.getLogger(BroadcastForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(type.equals("TO SELECTED GUILD")){
            String comboBox = (String) ddGuild.getSelectedItem();
            String[] parts = comboBox.split("/");
            String guildId = parts[1];
 
            try {
                jda.broadcastToGuild(guildId,message,schedule );
                String sentTo = "TO GUILD "+parts[0] ; 
                Object[] data ={message,sentTo,schedule};
                db.edit("INSERT INTO broadcast (messageBroadcast, sentTo, dateSent) VALUES(?,?,?)", data);
            } catch (SQLException ex) {
                Logger.getLogger(BroadcastForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(type.equals("TO SELECTED GUILD'S MEMBER")){
            String comboBox = (String) ddGuild.getSelectedItem();
            String[] parts = comboBox.split("/");
            String guildId = parts[1];

            try {
                jda.broadcastToGuildMembers(guildId,message,schedule);
                String sentTo = "TO "+parts[0] +"GUILD MEMBER" ; 
                Object[] data ={message,sentTo,schedule};
                db.edit("INSERT INTO broadcast (messageBroadcast, sentTo, dateSent) VALUES(?,?,?)", data);
            } catch (SQLException ex) {
                Logger.getLogger(BroadcastForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
            
    }
     
    private void tblBroadcastMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBroadcastMouseClicked

    }//GEN-LAST:event_tblBroadcastMouseClicked

    private void btnBroadcastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBroadcastActionPerformed
        try{
            String message = txtBroadcast.getText();
            if(message==null || message.isEmpty()){
                JOptionPane.showInternalMessageDialog(null, "Pesan Masih Kosong");

            }else{
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
                LocalDateTime currentDateTime = LocalDateTime.now();
                String now = currentDateTime.format(formatter);
                broadcastListener(message,now);
            }
        }
        catch(NullPointerException e){
            JOptionPane.showInternalMessageDialog(null, "Data Masih Kosong");
            
        }
        catch(Exception E){
            JOptionPane.showInternalMessageDialog(null, "Error yang lain");
            System.out.println(E);
        }
    }//GEN-LAST:event_btnBroadcastActionPerformed

    private void btnScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScheduleActionPerformed
        try{
            String message = txtBroadcast.getText();
            if(message==null || message.isEmpty()){
                JOptionPane.showInternalMessageDialog(null, "Pesan Masih Kosong");

            }else{
            
                SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
                Date raw = inputDate.getDate();
                String date = formatter.format(raw);

                int valueHour = ((Number) (inputHour.getValue())).intValue();

                String hour = Integer.toString(valueHour);
                if(valueHour < 10){
                    hour = "0"+hour;
                }

                 int valueMinute = ((Number) (inputMinute.getValue())).intValue();
                String minute = Integer.toString(valueMinute);
                if(valueMinute < 10){
                    hour = "0"+minute;
                }

                String schedule = date +" "+hour+":"+minute ;
                System.out.println(schedule);
                broadcastListener(message,schedule);

            }


        }
        catch(NullPointerException e){
            JOptionPane.showInternalMessageDialog(null, "Data Masih Kosong");
            
        }
        catch(Exception E){
            JOptionPane.showInternalMessageDialog(null, "Error yang lain");
            System.out.println(E);
        }
    }//GEN-LAST:event_btnScheduleActionPerformed

 
    /**
     * @param args the command line arguments
     */ 
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BroadcastForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BroadcastForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BroadcastForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BroadcastForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new BroadcastForm().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(BroadcastForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBroadcast;
    private javax.swing.JButton btnSchedule;
    private javax.swing.JComboBox<String> ddBroadType;
    private javax.swing.JComboBox<String> ddGuild;
    private com.toedter.calendar.JDateChooser inputDate;
    private javax.swing.JSpinner inputHour;
    private javax.swing.JSpinner inputMinute;
    private javax.swing.JLabel labelDate;
    private javax.swing.JLabel labelDate1;
    private javax.swing.JLabel labelDate2;
    private javax.swing.JLabel labelMsgBroadcast;
    private javax.swing.JScrollPane spBroadcast;
    private javax.swing.JScrollPane spBrodcast1;
    private javax.swing.JTable tblBroadcast;
    private javax.swing.JTextArea txtBroadcast;
    // End of variables declaration//GEN-END:variables
}
